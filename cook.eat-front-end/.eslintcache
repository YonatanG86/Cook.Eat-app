[{"/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/index.js":"1","/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Conteaxts/autoConteaxt.js":"2","/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/HomePage.js":"3","/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/Recipe.js":"4","/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/LoginModal.js":"5","/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/RegistrationCarousel.js":"6","/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/NavigationBar.js":"7","/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/App.js":"8","/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/AddRecipe.js":"9","/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/MyRecipes.js":"10","/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/SavedRecipes.js":"11","/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/ProfileSettings.js":"12"},{"size":288,"mtime":1611072545166,"results":"13","hashOfConfig":"14"},{"size":3582,"mtime":1611072545165,"results":"15","hashOfConfig":"14"},{"size":951,"mtime":1611073015039,"results":"16","hashOfConfig":"14"},{"size":184,"mtime":1611072545162,"results":"17","hashOfConfig":"14"},{"size":3213,"mtime":1611076295586,"results":"18","hashOfConfig":"14"},{"size":7661,"mtime":1611074639456,"results":"19","hashOfConfig":"14"},{"size":3020,"mtime":1611482601661,"results":"20","hashOfConfig":"14"},{"size":1882,"mtime":1611482202393,"results":"21","hashOfConfig":"14"},{"size":5496,"mtime":1611482098455,"results":"22","hashOfConfig":"14"},{"size":272,"mtime":1611482109152,"results":"23","hashOfConfig":"14"},{"size":287,"mtime":1611482122326,"results":"24","hashOfConfig":"14"},{"size":4367,"mtime":1611482082041,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1s1jref",{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/index.js",[],"/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Conteaxts/autoConteaxt.js",["53","54","55"],"/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/HomePage.js",["56"],"/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/Recipe.js",[],"/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/LoginModal.js",["57","58","59"],"import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport '../styles/LoginModal.css';\nimport cookEatLogo from '../img/cookEatLogo.png';\nimport { Modal, Form, Button } from \"react-bootstrap\";\nimport { useAuth } from \"../Conteaxts/autoConteaxt\";\nimport { useForm } from \"react-hook-form\";\n\nconst formFields = {\n  email: \"\",\n  password: \"\",\n};\nconst LoginModal = ({ show, onHide }) => {\n  const [loading, setLoading] = useState(false);\n  const { register, handleSubmit, errors } = useForm();\n  const [formInfo, setFormInfo] = useState(formFields);\n  const { hendaleLogin } = useAuth();\n  const history = useHistory();\n\n  const handleChange = (e) => {\n    setFormInfo({\n      ...formInfo,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const onSubmit = (data, e) => {\n    e.preventDefault();\n    hendaleLogin(formInfo);\n  };\n\n  return (\n    <>\n      <Modal\n        show={show}\n        onHide={onHide}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        className=\"login\">\n\n          <Modal.Header closeButton>\n            <Modal.Title>Sign in to your account</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <Form className=\"login-form\" onSubmit={handleSubmit(onSubmit)}>\n              <img id=\"login-image\" alt=\"user\" src={cookEatLogo} />\n              <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Email address</Form.Label>\n                <Form.Control\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Enter email\"\n                  onChange={handleChange}\n                  ref={register({\n                  pattern: /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g,})}\n                  required />\n                <div className=\"error-box\">\n                  {errors.email && errors.email.type === \"pattern\" && (<p className=\"error-field\">Invalid email</p>)}\n                </div>\n                <Form.Text className=\"text-muted\">\n                  We'll never share your email with anyone else.\n                </Form.Text>\n              </Form.Group>\n\n              <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"Enter password\"\n                  onChange={handleChange}\n                  ref={register({\n                  pattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/gm,})}\n                  required />\n                <div className=\"error-box\">\n                  {errors.password && errors.password.type === \"pattern\" && (<p className=\"error-field\">Invalid password</p>)}\n                </div>\n              </Form.Group>\n\n              <Button type=\"submit\" className=\"login-btn btn-primary btn-block\">\n                Log in\n              </Button>\n              <p>Don't have a login? <span id=\"register\">Register now</span>.</p>\n            </Form>\n          </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\nexport default LoginModal;",["60","61"],"/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/RegistrationCarousel.js",["62"],"import React, { useState, useRef } from \"react\";\n// import { useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { useAuth } from \"../Conteaxts/autoConteaxt\";\nimport '../styles/RegistrationCarousel.css';\nimport { Carousel, Button, Form, Col } from \"react-bootstrap\";\n\nconst formFields = {\n  userName: \"\",\n  email: \"\",\n  password: \"\",\n  repatePass: \"\",\n};\n\nconst RegistrationCarousel = () => {\n  const [index, setIndex] = useState(0);\n  const { register, handleSubmit, errors, watch } = useForm();\n  const [formInfo, setFormInfo] = useState(formFields);\n  const [file, setFile] = useState();\n  const [userImage, setUserImage] = useState();\n  const { signupUser } = useAuth();\n  const password = useRef({});\n  password.current = watch(\"password\");\n  const handleChange = (e) => {\n    setFormInfo({\n      ...formInfo,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const types = [\"image/png\", \"image/jpeg\", \"image/jpg\"];\n\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    if (file && types.includes(file.type)) {\n      setFile(file);\n      let reader = new FileReader();\n      reader.onload = (e) => {\n        setUserImage(e.target.result);\n      };\n      reader.readAsDataURL(e.target.files[0]);\n    } else {\n      alert(\"Please select an image file (png, jpg,jpeg)!\");\n    }\n  };\n\n  const onSubmit = (data, e) => {\n    e.preventDefault();\n    let formData = new FormData();\n    formData.append(\"data\", JSON.stringify(formInfo));\n    formData.append(\"petImage\", file);\n    signupUser(formData);\n  };\n      \n    const handleSelect = (selectedIndex, event) => {\n        setIndex(selectedIndex);\n    };\n\n    const directionButtons = (direction) => {\n      return (\n        <span\n          aria-hidden=\"true\"\n          className={direction === \"Next\" ? \"button-next\" : \"button-prev\"}\n        >\n          {direction}\n        </span>\n      );\n    };\n    \n    return (\n        <>\n         <Carousel\n          interval={null} \n          activeIndex={index} \n          nextIcon={directionButtons(\"Next\")}\n          prevIcon={directionButtons(\"Previous\")}\n          onSelect={handleSelect}>\n      \n          <Carousel.Item>\n            <p>PERSONALIZE YOUR EXPERIENCE</p>\n            <h3>What are your favorite cuisines?</h3>\n            <Carousel.Caption>\n              {/* <h3></h3>\n              <p></p> */}\n            </Carousel.Caption>\n          </Carousel.Item>\n\n          <Carousel.Item>\n            <p>PERSONALIZE YOUR EXPERIENCE</p>\n            <h3>Do you follow any of these diets?</h3>\n            <Carousel.Caption>\n              {/* <h3></h3>\n              <p></p> */}\n            </Carousel.Caption>\n          </Carousel.Item>\n\n          <Carousel.Item>\n            <p>PERSONALIZE YOUR EXPERIENCE</p>\n            <h3>How would you describe your cooking skills?</h3>\n            <Carousel.Caption>\n              {/* <h3></h3>\n              <p></p> */}\n            </Carousel.Caption>\n          </Carousel.Item>\n\n          <Carousel.Item>\n            <h3>Create your account by filling out the information below</h3>\n            <Carousel.Caption>\n\n            <Form onSubmit={handleSubmit(onSubmit)}>\n            <Form.Group as={Col} controlId=\"formGridUsername\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                name=\"userName\"\n                type=\"username\"\n                placeholder=\"Enter username\"\n                onChange={handleChange}\n                minLength=\"2\"\n                maxLength=\"15\"\n                ref={register({ pattern: /^[A-Za-z\\s]+$/i })}\n                required />\n              <div className=\"error-box\">\n                {errors.userName && errors.userName.type === \"pattern\" && (<p className=\"error-field\">English letters only</p>)}\n              </div>\n              <Form.Control.Feedback type=\"invalid\">\n                Username required\n              </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group as={Col} controlId=\"formGridEmail\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"Enter email\"\n                onChange={handleChange}\n                required\n                ref={register({\n                  pattern: /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g,})}\n              />\n              <div className=\"error-box\">\n                {errors.email && errors.email.type === \"pattern\" && (<p className=\"error-field\">Invalid email</p>)}\n              </div>\n              <Form.Control.Feedback type=\"invalid\">\n                Email required\n              </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group as={Col} controlId=\"formGridPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Password\"\n                onChange={handleChange}\n                required\n                ref={register({pattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/gm,})}/>\n              <Form.Control.Feedback type=\"invalid\">\n                Password required\n              </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group as={Col} controlId=\"formGridConfirmPassword\">\n              <Form.Label>Confirm Password</Form.Label>\n              <Form.Control\n                name=\"repatePass\"\n                type=\"password\"\n                placeholder=\"Confirm Password\"\n                onChange={handleChange}\n                required\n                ref={register({validate: (value) => value === password.current || \"The passwords do not match\",})}\n              />\n              {errors.repatePass && (<p className=\"error-field\">{errors.repatePass.message}</p>)}\n              <div className=\"error-box\">\n                {errors.password && errors.password.type === \"pattern\" && (\n                  <p className=\"error-field\">\n                    Password must contain : <br />\n                    - at least 8 characters <br />\n                    - must contain at least 1 uppercase letter,\n                    <br />\n                    1 lowercase letter, and 1 number\n                    <br />- Can contain special characters\n                  </p>\n                )}\n              </div>\n              <Form.Control.Feedback type=\"invalid\">\n                The password is empty or doesn't match\n              </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>Profile Image</Form.Label>\n              <Form.Control\n                name=\"picture\"\n                type=\"file\"\n                placeholder=\"Avater\"\n                onChange={handleFileUpload}\n                required\n              />\n              <img\n                src={userImage}\n                style={{ maxWidth: \"5rem\" }}\n                alt=\"profile-image\"\n              />\n            </Form.Group>\n            <div className=\"button-container\">\n              <Button\n                className=\"signup-btn btn-primary btn-block\"\n                type=\"submit\"\n              >\n                Sign up\n              </Button>\n              <p className=\"disclaimer\">\n                By continuing you agree to Cook.Eat's Terms of Service &amp;\n                Privacy Policy.\n              </p>\n            </div>\n          </Form>\n\n            </Carousel.Caption>\n          </Carousel.Item>\n        </Carousel>\n        </>\n    )\n}\n\nexport default RegistrationCarousel;","/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/NavigationBar.js",["63","64"],"/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/App.js",["65","66"],"/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/AddRecipe.js",[],"/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/MyRecipes.js",[],"/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/SavedRecipes.js",[],"/Users/Laura/Desktop/Cook.Eat-app-group-assignment/cook.eat-front-end/src/Components/ProfileSettings.js",["67","68","69","70","71"],{"ruleId":"72","severity":1,"message":"73","line":1,"column":39,"nodeType":"74","messageId":"75","endLine":1,"endColumn":48},{"ruleId":"72","severity":1,"message":"76","line":13,"column":10,"nodeType":"74","messageId":"75","endLine":13,"endColumn":17},{"ruleId":"72","severity":1,"message":"77","line":13,"column":19,"nodeType":"74","messageId":"75","endLine":13,"endColumn":29},{"ruleId":"72","severity":1,"message":"78","line":1,"column":17,"nodeType":"74","messageId":"75","endLine":1,"endColumn":25},{"ruleId":"72","severity":1,"message":"76","line":14,"column":10,"nodeType":"74","messageId":"75","endLine":14,"endColumn":17},{"ruleId":"72","severity":1,"message":"77","line":14,"column":19,"nodeType":"74","messageId":"75","endLine":14,"endColumn":29},{"ruleId":"72","severity":1,"message":"79","line":18,"column":9,"nodeType":"74","messageId":"75","endLine":18,"endColumn":16},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":200,"column":15,"nodeType":"86","endLine":204,"endColumn":17},{"ruleId":"72","severity":1,"message":"78","line":1,"column":17,"nodeType":"74","messageId":"75","endLine":1,"endColumn":25},{"ruleId":"72","severity":1,"message":"87","line":2,"column":16,"nodeType":"74","messageId":"75","endLine":2,"endColumn":26},{"ruleId":"72","severity":1,"message":"78","line":1,"column":17,"nodeType":"74","messageId":"75","endLine":1,"endColumn":25},{"ruleId":"72","severity":1,"message":"73","line":1,"column":27,"nodeType":"74","messageId":"75","endLine":1,"endColumn":36},{"ruleId":"72","severity":1,"message":"88","line":7,"column":19,"nodeType":"74","messageId":"75","endLine":7,"endColumn":27},{"ruleId":"72","severity":1,"message":"89","line":8,"column":22,"nodeType":"74","messageId":"75","endLine":8,"endColumn":33},{"ruleId":"72","severity":1,"message":"90","line":9,"column":22,"nodeType":"74","messageId":"75","endLine":9,"endColumn":33},{"ruleId":"72","severity":1,"message":"91","line":10,"column":18,"nodeType":"74","messageId":"75","endLine":10,"endColumn":25},{"ruleId":"72","severity":1,"message":"92","line":11,"column":21,"nodeType":"74","messageId":"75","endLine":11,"endColumn":31},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'useState' is defined but never used.","'history' is assigned a value but never used.","no-native-reassign",["93"],"no-negated-in-lhs",["94"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useHistory' is defined but never used.","'setEmail' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'setUsername' is assigned a value but never used.","'setDate' is assigned a value but never used.","'setCountry' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]